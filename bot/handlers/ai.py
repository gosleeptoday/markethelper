from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from bot.keyboards.exit_ai import chatgpt_kb
from bot.keyboards.profile_menu import profile_menu_kb
from bot.services.api_client import APIClient
from bot.states.ai_states import AIChatStates

router = Router()
api = APIClient()

@router.message(F.text == "ü§ñChatGPT")
async def start_chatgpt(message: types.Message, state: FSMContext):
    await state.set_state(AIChatStates.chatting)
    await message.answer(
        "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è —Å–ø—Ä–æ—à—É —É ChatGPT.\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=chatgpt_kb()
    )


@router.message(F.text.in_({"/exit", "üö™ –í—ã–π—Ç–∏"}))
async def exit_chatgpt(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT",
        reply_markup=profile_menu_kb()
    )


@router.message(AIChatStates.chatting)
async def gpt_chat(message: types.Message, state: FSMContext):
    question = message.text
    thinking_msg = await message.answer("‚åõ –î—É–º–∞—é...")

    try:
        answer = await api.query_ai(question)
        await thinking_msg.delete()
        await message.answer(answer, parse_mode="Markdown")
    except Exception as e:
        await thinking_msg.delete()
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")