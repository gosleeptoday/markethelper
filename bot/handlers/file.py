import os
from aiogram import Router, types, F
from backend.models.file import AccessFile
from backend.services.utils import generate_and_save_cookies
from aiogram.types import FSInputFile

router = Router()

@router.callback_query(F.data.startswith("file:update:"))
async def update_cookies_handler(callback: types.CallbackQuery):
    file_id = int(callback.data.split(":")[2])

    file = await AccessFile.get_or_none(id=file_id)
    if not file:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    file = await generate_and_save_cookies(file)
    await callback.message.answer(
        f"üîÑ –ö—É–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞ <code>{file.id}</code> –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <b>{file.last_updated}</b>",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("file:get:"))
async def get_file_download_handler(callback: types.CallbackQuery):
    file_id = int(callback.data.split(":")[2])

    file = await AccessFile.get_or_none(id=file_id)
    if not file or not file.path or not os.path.exists(file.path):
        await callback.message.answer("‚ùå –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ.")
        await callback.answer()
        return

    document = FSInputFile(file.path, filename=f"cookies_{file.id}.txt")
    await callback.message.answer_document(document=document, caption="üìÇ –í–∞—à–∏ –∫—É–∫–∏")
    await callback.answer()