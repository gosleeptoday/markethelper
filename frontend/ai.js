const API_BASE = "http://localhost:8000/ai";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
async function checkHealth() {
  try {
    const res = await fetch(`${API_BASE}/health`);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${res.status}`);
    const data = await res.json();
    document.getElementById("healthStatus").innerText =
      data.status === "ok" ? "‚úÖ AI —Ä–∞–±–æ—Ç–∞–µ—Ç" : "‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω";
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è:", err);
    document.getElementById("healthStatus").innerText = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏";
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ PDF
document.getElementById("uploadForm").addEventListener("submit", async (e) => {
  e.preventDefault();

  try {
    const formData = new FormData(e.target);
    const res = await fetch(`${API_BASE}/texts`, {
      method: "POST",
      body: formData
    });

    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
    const data = await res.json();

    document.getElementById("uploadResult").innerText = JSON.stringify(data, null, 2);
    loadTexts();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–∞/PDF:", err);
    document.getElementById("uploadResult").innerText = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
async function loadTexts() {
  try {
    const res = await fetch(`${API_BASE}/texts`);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${res.status}`);
    const data = await res.json();

    const tbody = document.querySelector("#textsTable tbody");
    tbody.innerHTML = "";

    if (!data || data.length === 0) {
      tbody.innerHTML = `<tr><td colspan="5">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤</td></tr>`;
      return;
    }

    data.forEach((item) => {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${item.id || "-"}</td>
        <td>${item.metadata?.source || "-"}</td>
        <td>${item.metadata?.type || "-"}</td>
        <td>${item.text?.slice(0, 100) || "-"}</td>
        <td><button onclick="deleteText('${item.id}')">üóë –£–¥–∞–ª–∏—Ç—å</button></td>
      `;
      tbody.appendChild(row);
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤:", err);
    const tbody = document.querySelector("#textsTable tbody");
    tbody.innerHTML = `<tr><td colspan="5">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</td></tr>`;
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
async function deleteText(id) {
  if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç?")) return;
  try {
    const res = await fetch(`${API_BASE}/texts/${id}`, { method: "DELETE" });
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
    loadTexts();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç");
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI
document.getElementById("queryForm").addEventListener("submit", async (e) => {
  e.preventDefault();

  const question = document.getElementById("question").value;

  try {
    const res = await fetch(`${API_BASE}/query`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ question })
    });

    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞: ${res.status}`);
    const data = await res.json();

    document.getElementById("answerBox").innerHTML =
      `<b>–û—Ç–≤–µ—Ç:</b> ${data.answer}<br><small>‚è± ${data.time_seconds.toFixed(2)} —Å–µ–∫</small>`;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ AI:", err);
    document.getElementById("answerBox").innerText = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ";
  }
});

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç—è–Ω–µ–º —Ç–µ–∫—Å—Ç—ã
loadTexts();
checkHealth();
